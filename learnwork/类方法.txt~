 总结了一下类方法的定义：  

```ruby
#1
  class Person
    def self.species
      "Homo Sapien"
    end
  end
  #2
  class Person
    def Person.species
      "Homo Sapien"
    end
  end
  #3
  class Person
    class << self
      def species
        "Homo Sapien"
      end
    end
  end
  #4 
  class << Person
    def species
      "Homo Sapien"
    end
  end
  #5
  Person.instance_eval do
    def species
      "Homo Sapien"
    end
  end
#6
  class Foo
  end
  metaclass = (class << Foo; self; end)
  metaclass.class_eval do
      def species
        "Homo Sapien"
      end
    end
  end
```
最后一个还不理解，就先记下来.
#### “ << ” 方法：  
先看一个例子：  

```ruby
class A
  def hello
    puts "come from A"
  end
end
class << A
  def hello
    puts "come from Out"
  end
end
puts A.hello     #=>come from Out
```

在A类的定义之外重新打开A类，定义新的类方法或覆盖已经定义好的类方法。
而在这里  

```ruby
class User
  class << self
    def category
      'User'
    end
  end
end
```

self 指带的是当前User类本身，所以就相当于在定义User类的同时，通过class << self来定义类方法，这和self的作用域有关，当然也可以写成这样:  

```ruby
class User
  class << User
    def category
      'User'
    end
  end
end
user.category    #=>user
```


